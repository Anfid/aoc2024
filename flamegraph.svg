<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="3023"><g><title>aoc2024`aoc2024::day1::parse (1 samples, 0.03%)</title><rect x="0.0000%" y="197" width="0.0331%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>aoc2024`DYLD-STUB$$realloc (1 samples, 0.03%)</title><rect x="59.8743%" y="149" width="0.0331%" height="15" fill="rgb(217,0,24)" fg:x="1810" fg:w="1"/><text x="60.1243%" y="159.50"></text></g><g><title>aoc2024`__rdl_realloc (1 samples, 0.03%)</title><rect x="59.9074%" y="149" width="0.0331%" height="15" fill="rgb(221,193,54)" fg:x="1811" fg:w="1"/><text x="60.1574%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.07%)</title><rect x="60.2713%" y="101" width="0.0662%" height="15" fill="rgb(248,212,6)" fg:x="1822" fg:w="2"/><text x="60.5213%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="60.3374%" y="101" width="0.0331%" height="15" fill="rgb(208,68,35)" fg:x="1824" fg:w="1"/><text x="60.5874%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.10%)</title><rect x="60.3705%" y="101" width="0.0992%" height="15" fill="rgb(232,128,0)" fg:x="1825" fg:w="3"/><text x="60.6205%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="60.6021%" y="85" width="0.0331%" height="15" fill="rgb(207,160,47)" fg:x="1832" fg:w="1"/><text x="60.8521%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="60.6351%" y="85" width="0.0331%" height="15" fill="rgb(228,23,34)" fg:x="1833" fg:w="1"/><text x="60.8851%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.10%)</title><rect x="60.6682%" y="85" width="0.0992%" height="15" fill="rgb(218,30,26)" fg:x="1834" fg:w="3"/><text x="60.9182%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.03%)</title><rect x="60.7674%" y="69" width="0.0331%" height="15" fill="rgb(220,122,19)" fg:x="1837" fg:w="1"/><text x="61.0174%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.13%)</title><rect x="60.7674%" y="85" width="0.1323%" height="15" fill="rgb(250,228,42)" fg:x="1837" fg:w="4"/><text x="61.0174%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.10%)</title><rect x="60.8005%" y="69" width="0.0992%" height="15" fill="rgb(240,193,28)" fg:x="1838" fg:w="3"/><text x="61.0505%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.07%)</title><rect x="60.8336%" y="53" width="0.0662%" height="15" fill="rgb(216,20,37)" fg:x="1839" fg:w="2"/><text x="61.0836%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="60.8667%" y="37" width="0.0331%" height="15" fill="rgb(206,188,39)" fg:x="1840" fg:w="1"/><text x="61.1167%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.46%)</title><rect x="60.4697%" y="101" width="0.4631%" height="15" fill="rgb(217,207,13)" fg:x="1828" fg:w="14"/><text x="60.7197%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="60.8998%" y="85" width="0.0331%" height="15" fill="rgb(231,73,38)" fg:x="1841" fg:w="1"/><text x="61.1498%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.10%)</title><rect x="60.9659%" y="85" width="0.0992%" height="15" fill="rgb(225,20,46)" fg:x="1843" fg:w="3"/><text x="61.2159%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.07%)</title><rect x="61.2306%" y="69" width="0.0662%" height="15" fill="rgb(210,31,41)" fg:x="1851" fg:w="2"/><text x="61.4806%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.26%)</title><rect x="61.0652%" y="85" width="0.2646%" height="15" fill="rgb(221,200,47)" fg:x="1846" fg:w="8"/><text x="61.3152%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="61.2967%" y="69" width="0.0331%" height="15" fill="rgb(226,26,5)" fg:x="1853" fg:w="1"/><text x="61.5467%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="61.3298%" y="85" width="0.0331%" height="15" fill="rgb(249,33,26)" fg:x="1854" fg:w="1"/><text x="61.5798%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="61.3298%" y="69" width="0.0331%" height="15" fill="rgb(235,183,28)" fg:x="1854" fg:w="1"/><text x="61.5798%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="61.3298%" y="53" width="0.0331%" height="15" fill="rgb(221,5,38)" fg:x="1854" fg:w="1"/><text x="61.5798%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="61.3629%" y="85" width="0.0331%" height="15" fill="rgb(247,18,42)" fg:x="1855" fg:w="1"/><text x="61.6129%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="61.3960%" y="85" width="0.0331%" height="15" fill="rgb(241,131,45)" fg:x="1856" fg:w="1"/><text x="61.6460%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="61.4290%" y="85" width="0.0331%" height="15" fill="rgb(249,31,29)" fg:x="1857" fg:w="1"/><text x="61.6790%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.10%)</title><rect x="61.4621%" y="85" width="0.0992%" height="15" fill="rgb(225,111,53)" fg:x="1858" fg:w="3"/><text x="61.7121%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.13%)</title><rect x="61.5614%" y="85" width="0.1323%" height="15" fill="rgb(238,160,17)" fg:x="1861" fg:w="4"/><text x="61.8114%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (4 samples, 0.13%)</title><rect x="61.7598%" y="69" width="0.1323%" height="15" fill="rgb(214,148,48)" fg:x="1867" fg:w="4"/><text x="62.0098%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="61.9583%" y="53" width="0.0331%" height="15" fill="rgb(232,36,49)" fg:x="1873" fg:w="1"/><text x="62.2083%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.10%)</title><rect x="62.1237%" y="37" width="0.0992%" height="15" fill="rgb(209,103,24)" fg:x="1878" fg:w="3"/><text x="62.3737%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="62.2230%" y="37" width="0.0331%" height="15" fill="rgb(229,88,8)" fg:x="1881" fg:w="1"/><text x="62.4730%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.63%)</title><rect x="61.6937%" y="85" width="0.6285%" height="15" fill="rgb(213,181,19)" fg:x="1865" fg:w="19"/><text x="61.9437%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.43%)</title><rect x="61.8922%" y="69" width="0.4300%" height="15" fill="rgb(254,191,54)" fg:x="1871" fg:w="13"/><text x="62.1422%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.33%)</title><rect x="61.9914%" y="53" width="0.3308%" height="15" fill="rgb(241,83,37)" fg:x="1874" fg:w="10"/><text x="62.2414%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.07%)</title><rect x="62.2560%" y="37" width="0.0662%" height="15" fill="rgb(233,36,39)" fg:x="1882" fg:w="2"/><text x="62.5060%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="62.3222%" y="85" width="0.0331%" height="15" fill="rgb(226,3,54)" fg:x="1884" fg:w="1"/><text x="62.5722%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (44 samples, 1.46%)</title><rect x="60.9328%" y="101" width="1.4555%" height="15" fill="rgb(245,192,40)" fg:x="1842" fg:w="44"/><text x="61.1828%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="62.3553%" y="85" width="0.0331%" height="15" fill="rgb(238,167,29)" fg:x="1885" fg:w="1"/><text x="62.6053%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (108 samples, 3.57%)</title><rect x="60.0728%" y="117" width="3.5726%" height="15" fill="rgb(232,182,51)" fg:x="1816" fg:w="108"/><text x="60.3228%" y="127.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 1.26%)</title><rect x="62.3884%" y="101" width="1.2570%" height="15" fill="rgb(231,60,39)" fg:x="1886" fg:w="38"/><text x="62.6384%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.03%)</title><rect x="63.6454%" y="117" width="0.0331%" height="15" fill="rgb(208,69,12)" fg:x="1924" fg:w="1"/><text x="63.8954%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.10%)</title><rect x="63.6785%" y="117" width="0.0992%" height="15" fill="rgb(235,93,37)" fg:x="1925" fg:w="3"/><text x="63.9285%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (118 samples, 3.90%)</title><rect x="60.0397%" y="133" width="3.9034%" height="15" fill="rgb(213,116,39)" fg:x="1815" fg:w="118"/><text x="60.2897%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.17%)</title><rect x="63.7777%" y="117" width="0.1654%" height="15" fill="rgb(222,207,29)" fg:x="1928" fg:w="5"/><text x="64.0277%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.17%)</title><rect x="63.7777%" y="101" width="0.1654%" height="15" fill="rgb(206,96,30)" fg:x="1928" fg:w="5"/><text x="64.0277%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.03%)</title><rect x="63.9431%" y="133" width="0.0331%" height="15" fill="rgb(218,138,4)" fg:x="1933" fg:w="1"/><text x="64.1931%" y="143.50"></text></g><g><title>aoc2024`alloc::raw_vec::finish_grow (129 samples, 4.27%)</title><rect x="59.9405%" y="149" width="4.2673%" height="15" fill="rgb(250,191,14)" fg:x="1812" fg:w="129"/><text x="60.1905%" y="159.50">aoc20..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.23%)</title><rect x="63.9762%" y="133" width="0.2316%" height="15" fill="rgb(239,60,40)" fg:x="1934" fg:w="7"/><text x="64.2262%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="64.2077%" y="149" width="0.0331%" height="15" fill="rgb(206,27,48)" fg:x="1941" fg:w="1"/><text x="64.4577%" y="159.50"></text></g><g><title>aoc2024`aoc2024::day1::parse (1,746 samples, 57.76%)</title><rect x="6.6159%" y="181" width="57.7572%" height="15" fill="rgb(225,35,8)" fg:x="200" fg:w="1746"/><text x="6.8659%" y="191.50">aoc2024`aoc2024::day1::parse</text></g><g><title>aoc2024`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (138 samples, 4.57%)</title><rect x="59.8081%" y="165" width="4.5650%" height="15" fill="rgb(250,213,24)" fg:x="1808" fg:w="138"/><text x="60.0581%" y="175.50">aoc20..</text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.13%)</title><rect x="64.2408%" y="149" width="0.1323%" height="15" fill="rgb(247,123,22)" fg:x="1942" fg:w="4"/><text x="64.4908%" y="159.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.07%)</title><rect x="64.3731%" y="181" width="0.0662%" height="15" fill="rgb(231,138,38)" fg:x="1946" fg:w="2"/><text x="64.6231%" y="191.50"></text></g><g><title>aoc2024`core::slice::sort::shared::smallsort::small_sort_network (3 samples, 0.10%)</title><rect x="64.4393%" y="181" width="0.0992%" height="15" fill="rgb(231,145,46)" fg:x="1948" fg:w="3"/><text x="64.6893%" y="191.50"></text></g><g><title>aoc2024`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="71.3199%" y="165" width="0.0331%" height="15" fill="rgb(251,118,11)" fg:x="2156" fg:w="1"/><text x="71.5699%" y="175.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (24 samples, 0.79%)</title><rect x="71.3530%" y="165" width="0.7939%" height="15" fill="rgb(217,147,25)" fg:x="2157" fg:w="24"/><text x="71.6030%" y="175.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (9 samples, 0.30%)</title><rect x="71.8492%" y="149" width="0.2977%" height="15" fill="rgb(247,81,37)" fg:x="2172" fg:w="9"/><text x="72.0992%" y="159.50"></text></g><g><title>aoc2024`core::slice::sort::shared::smallsort::small_sort_network (39 samples, 1.29%)</title><rect x="72.1469%" y="165" width="1.2901%" height="15" fill="rgb(209,12,38)" fg:x="2181" fg:w="39"/><text x="72.3969%" y="175.50"></text></g><g><title>aoc2024`DYLD-STUB$$memcpy (2 samples, 0.07%)</title><rect x="79.6229%" y="149" width="0.0662%" height="15" fill="rgb(227,1,9)" fg:x="2407" fg:w="2"/><text x="79.8729%" y="159.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (12 samples, 0.40%)</title><rect x="79.6891%" y="149" width="0.3970%" height="15" fill="rgb(248,47,43)" fg:x="2409" fg:w="12"/><text x="79.9391%" y="159.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (1 samples, 0.03%)</title><rect x="80.0529%" y="133" width="0.0331%" height="15" fill="rgb(221,10,30)" fg:x="2420" fg:w="1"/><text x="80.3029%" y="143.50"></text></g><g><title>aoc2024`core::slice::sort::shared::smallsort::small_sort_network (138 samples, 4.57%)</title><rect x="80.0860%" y="149" width="4.5650%" height="15" fill="rgb(210,229,1)" fg:x="2421" fg:w="138"/><text x="80.3360%" y="159.50">aoc20..</text></g><g><title>aoc2024`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="89.1499%" y="133" width="0.0331%" height="15" fill="rgb(222,148,37)" fg:x="2695" fg:w="1"/><text x="89.3999%" y="143.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (7 samples, 0.23%)</title><rect x="89.1829%" y="133" width="0.2316%" height="15" fill="rgb(234,67,33)" fg:x="2696" fg:w="7"/><text x="89.4329%" y="143.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (1 samples, 0.03%)</title><rect x="89.3814%" y="117" width="0.0331%" height="15" fill="rgb(247,98,35)" fg:x="2702" fg:w="1"/><text x="89.6314%" y="127.50"></text></g><g><title>aoc2024`core::slice::sort::shared::smallsort::small_sort_network (117 samples, 3.87%)</title><rect x="89.4145%" y="133" width="3.8703%" height="15" fill="rgb(247,138,52)" fg:x="2703" fg:w="117"/><text x="89.6645%" y="143.50">aoc2..</text></g><g><title>aoc2024`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="95.2034%" y="117" width="0.0331%" height="15" fill="rgb(213,79,30)" fg:x="2878" fg:w="1"/><text x="95.4534%" y="127.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (4 samples, 0.13%)</title><rect x="95.2365%" y="117" width="0.1323%" height="15" fill="rgb(246,177,23)" fg:x="2879" fg:w="4"/><text x="95.4865%" y="127.50"></text></g><g><title>aoc2024`core::slice::sort::shared::pivot::median3_rec (1 samples, 0.03%)</title><rect x="95.3358%" y="101" width="0.0331%" height="15" fill="rgb(230,62,27)" fg:x="2882" fg:w="1"/><text x="95.5858%" y="111.50"></text></g><g><title>aoc2024`core::slice::sort::shared::smallsort::small_sort_network (75 samples, 2.48%)</title><rect x="95.3688%" y="117" width="2.4810%" height="15" fill="rgb(216,154,8)" fg:x="2883" fg:w="75"/><text x="95.6188%" y="127.50">ao..</text></g><g><title>aoc2024`core::slice::sort::shared::smallsort::small_sort_network (20 samples, 0.66%)</title><rect x="98.4783%" y="101" width="0.6616%" height="15" fill="rgb(244,35,45)" fg:x="2977" fg:w="20"/><text x="98.7283%" y="111.50"></text></g><g><title>aoc2024`core::slice::sort::shared::smallsort::small_sort_network (5 samples, 0.17%)</title><rect x="99.3053%" y="85" width="0.1654%" height="15" fill="rgb(251,115,12)" fg:x="3002" fg:w="5"/><text x="99.5553%" y="95.50"></text></g><g><title>aoc2024`core::slice::sort::unstable::quicksort::quicksort (11 samples, 0.36%)</title><rect x="99.1399%" y="101" width="0.3639%" height="15" fill="rgb(240,54,50)" fg:x="2997" fg:w="11"/><text x="99.3899%" y="111.50"></text></g><g><title>aoc2024`core::slice::sort::unstable::quicksort::quicksort (1 samples, 0.03%)</title><rect x="99.4707%" y="85" width="0.0331%" height="15" fill="rgb(233,84,52)" fg:x="3007" fg:w="1"/><text x="99.7207%" y="95.50"></text></g><g><title>aoc2024`core::slice::sort::unstable::quicksort::quicksort (51 samples, 1.69%)</title><rect x="97.8498%" y="117" width="1.6871%" height="15" fill="rgb(207,117,47)" fg:x="2958" fg:w="51"/><text x="98.0998%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="99.5038%" y="101" width="0.0331%" height="15" fill="rgb(249,43,39)" fg:x="3008" fg:w="1"/><text x="99.7538%" y="111.50"></text></g><g><title>aoc2024`core::slice::sort::unstable::quicksort::quicksort (192 samples, 6.35%)</title><rect x="93.2848%" y="133" width="6.3513%" height="15" fill="rgb(209,38,44)" fg:x="2820" fg:w="192"/><text x="93.5348%" y="143.50">aoc2024`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.10%)</title><rect x="99.5369%" y="117" width="0.0992%" height="15" fill="rgb(236,212,23)" fg:x="3009" fg:w="3"/><text x="99.7869%" y="127.50"></text></g><g><title>aoc2024`core::slice::sort::unstable::quicksort::quicksort (457 samples, 15.12%)</title><rect x="84.6510%" y="149" width="15.1174%" height="15" fill="rgb(242,79,21)" fg:x="2559" fg:w="457"/><text x="84.9010%" y="159.50">aoc2024`core::slice::so..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.13%)</title><rect x="99.6361%" y="133" width="0.1323%" height="15" fill="rgb(211,96,35)" fg:x="3012" fg:w="4"/><text x="99.8861%" y="143.50"></text></g><g><title>aoc2024`core::slice::sort::unstable::quicksort::quicksort (799 samples, 26.43%)</title><rect x="73.4370%" y="165" width="26.4307%" height="15" fill="rgb(253,215,40)" fg:x="2220" fg:w="799"/><text x="73.6870%" y="175.50">aoc2024`core::slice::sort::unstable::quick..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.10%)</title><rect x="99.7684%" y="149" width="0.0992%" height="15" fill="rgb(211,81,21)" fg:x="3016" fg:w="3"/><text x="100.0184%" y="159.50"></text></g><g><title>aoc2024`core::slice::sort::unstable::quicksort::quicksort (1,071 samples, 35.43%)</title><rect x="64.5385%" y="181" width="35.4284%" height="15" fill="rgb(208,190,38)" fg:x="1951" fg:w="1071"/><text x="64.7885%" y="191.50">aoc2024`core::slice::sort::unstable::quicksort::quicksort</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.10%)</title><rect x="99.8677%" y="165" width="0.0992%" height="15" fill="rgb(235,213,38)" fg:x="3019" fg:w="3"/><text x="100.1177%" y="175.50"></text></g><g><title>all (3,023 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="3023"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (3,023 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="3023"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>aoc2024`main (3,023 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="3023"/><text x="0.2500%" y="287.50">aoc2024`main</text></g><g><title>aoc2024`std::rt::lang_start_internal (3,023 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="3023"/><text x="0.2500%" y="271.50">aoc2024`std::rt::lang_start_internal</text></g><g><title>aoc2024`std::rt::lang_start::_{{closure}} (3,023 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="3023"/><text x="0.2500%" y="255.50">aoc2024`std::rt::lang_start::_{{closure}}</text></g><g><title>aoc2024`std::sys::backtrace::__rust_begin_short_backtrace (3,023 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="3023"/><text x="0.2500%" y="239.50">aoc2024`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>aoc2024`aoc2024::main (3,023 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="3023"/><text x="0.2500%" y="223.50">aoc2024`aoc2024::main</text></g><g><title>aoc2024`aoc2024::day1::part2 (3,022 samples, 99.97%)</title><rect x="0.0331%" y="197" width="99.9669%" height="15" fill="rgb(242,216,29)" fg:x="1" fg:w="3022"/><text x="0.2831%" y="207.50">aoc2024`aoc2024::day1::part2</text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="99.9669%" y="181" width="0.0331%" height="15" fill="rgb(230,116,27)" fg:x="3022" fg:w="1"/><text x="100.2169%" y="191.50"></text></g></svg></svg>